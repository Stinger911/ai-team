LogFilePath: "role_calls.log"
Gemini:
  APIKey: "YOUR_GEMINI_API_KEY"
  APIURL: "https://generativelanguage.googleapis.com"
  Model: "gemini-pro"
Tools:
  - Name: "list_dir"
    Description: "Lists contents of a directory."
    CommandTemplate: "ls -la {{.path}}"
    Arguments:
      - Name: "path"
        Type: "string"
        Description: "The path to the directory."
  - Name: "read_file"
    Description: "Reads the content of a file."
    CommandTemplate: "cat {{.file_path}}"
    Arguments:
      - Name: "file_path"
        Type: "string"
        Description: "The path to the file to read."
Roles:
  - Name: "architect"
    Model: "gemini-pro"
    Prompt: "You are an architect. Your task is to design a solution for the following problem: {{.problem}}. Output your design as a tool call to 'write_file'. The 'file_path' argument should be 'design.md'. The 'content' argument should be your markdown design, enclosed within <__AI_AGENT_CONTENT__> and <__AI_AGENT_CONTENT__> tags. Example: {\"tool_call\": {\"name\": \"write_file\", \"arguments\": {\"file_path\": \"design.md\", \"content\": \"<__AI_AGENT_CONTENT__># My Design...\n<__AI_AGENT_CONTENT__>\"}}}"
  - Name: "coder"
    Model: "gemini-pro"
    Prompt: "You are a coder. Implement the following design: {{.design}}. Output your code as a tool call to 'write_file'. The 'file_path' argument should be 'code.go'. The 'content' argument should be your code in a markdown code block, enclosed within <__AI_AGENT_CONTENT__> and <__AI_AGENT_CONTENT__> tags. Example: {\"tool_call\": {\"name\": \"write_file\", \"arguments\": {\"file_path\": \"code.go\", \"content\": \"<__AI_AGENT_CONTENT__>```go\nfunc main()...\n```\n<__AI_AGENT_CONTENT__>\"}}}"
  - Name: "tester"
    Model: "gemini-pro"
    Prompt: "You are a tester. Review the following code: {{.code}} and provide test cases. Output your test cases as a tool call to 'write_file'. The 'file_path' argument should be 'test_cases.md'. The 'content' argument should be your test cases in markdown, enclosed within <__AI_AGENT_CONTENT__> and <__AI_AGENT_CONTENT__> tags. Example: {\"tool_call\": {\"name\": \"write_file\", \"arguments\": {\"file_path\": \"test_cases.md\", \"content\": \"<__AI_AGENT_CONTENT__>## Test Cases...\n<__AI_AGENT_CONTENT__>\"}}}"

Chains:
  - Name: "design-code-test"
    Roles:
      - Name: "architect"
        Input:
          problem: "{{.initial_problem}}"
        OutputKey: "design"
      - Name: "coder"
        Input:
          design: "{{.design}}"
        OutputKey: "code"
      - Name: "tester"
        Input:
          code: "{{.code}}"
        OutputKey: "test_cases"

  # Example: Looping over a role to list a directory multiple times
  - Name: "list-dir-loop"
    Roles:
      - Name: "list_dir_role"
        Input:
          path: "{{.target_path}}"
        OutputKey: "dir_listing"
        Loop: true
        LoopCount: 3

  # Example: Looping over a role to read multiple files (AI must be prompted to use read_file tool)
  - Name: "read-multi-files"
    Roles:
      - Name: "read_file_role"
        Input:
          file_path: "{{.file_path}}"
        OutputKey: "file_content"
        Loop: true
        LoopCount: 2
